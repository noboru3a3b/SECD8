From: <Windows Internet Explorer 7 ‚Å•Û‘¶‚³‚ê‚Ä‚¢‚Ü‚·>
Subject: =?iso-2022-jp?B?TS5IaXJvaSdzIEhvbWUgUGFnZSAvIENvbW1vbiBMaXNwIBskQkZ+GyhC?=
	=?iso-2022-jp?B?GyRCTGchJ0hWMzBKVBsoQg==?=
Date: Thu, 14 Apr 2011 07:23:17 +0900
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----=_NextPart_000_001F_01CBFA74.D32BE250"
X-MimeOLE: Produced By Microsoft MimeOLE V6.00.2900.5994

This is a multi-part message in MIME format.

------=_NextPart_000_001F_01CBFA74.D32BE250
Content-Type: text/html;
	charset="shift_jis"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.geocities.jp/m_hiroi/clisp/clispb18.html

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE>M.Hiroi's Home Page / Common Lisp =
=93=FC=96=E5=81F=94=D4=8AO=95=D2</TITLE>
<META http-equiv=3DContent-Type content=3Dtext/html;charset=3Dshift_jis>
<META content=3D"Common Lisp,Lisp,CLISP,CLOS" name=3Dkeywords>
<META content=3D"Common Lisp=93=FC=96=E5=8Du=8D=C0" name=3Ddescription>
<META content=3D"Makoto Hiroi" name=3DAuthors><LINK title=3DLisp=20
href=3D"http://www.geocities.jp/m_hiroi/clisp/clisp_styles.css" =
type=3Dtext/css=20
rel=3Dstylesheet>
<META content=3D"MSHTML 6.00.6000.17095" name=3DGENERATOR></HEAD>
<BODY><!-- geoguide start -->
<DIV align=3Dcenter>
<SCRIPT language=3DJavaScript>var jps=3D382116067;var =
jpt=3D1302733397</SCRIPT>

<SCRIPT language=3DJavaScript=20
src=3D"http://bc.geocities.yahoo.co.jp/js/gg.js"></SCRIPT>
</DIV><!-- geoguide end -->M.Hiroi's Home=20
Page<BR><SMALL>http://www.geocities.jp/m_hiroi/<BR></SMALL>
<CENTER><A name=3Dtop>
<H1>Common Lisp Programming </H1></A>
<H2>Common Lisp =93=FC=96=E5=81F=94=D4=8AO=95=D2</H2><SMALL>[ <A=20
href=3D"http://www.geocities.jp/m_hiroi/clisp/clispb17.html">PrevPage</A>=
 | <A=20
href=3D"http://www.geocities.jp/m_hiroi/clisp/index.html#chap01">Common =
Lisp</A> |=20
<A =
href=3D"http://www.geocities.jp/m_hiroi/clisp/clispb19.html">NextPage</A>=
 ]=20
</SMALL></CENTER>
<HR>

<DIV class=3Dcontents>
<H3><A name=3Dchap16>Common Lisp =82=C5=8D=EC=82=E9 micro Scheme =
=83R=83=93=83p=83C=83=89 (3)</A></H3>
<P>=8D=A1=89=F1=82=CD micro Scheme =82=C9=81u=8Cp=91=B1 (continuation) =
=81v=82=F0=93=B1=93=FC=82=B5=82=DC=82=B7=81B=90=D9=8D=EC=82=CC=83y=81[=83=
W <A=20
href=3D"http://www.geocities.jp/m_hiroi/clisp/clispb14.html">Common Lisp =
=82=C5=8D=EC=82=E9 micro=20
Scheme (3)</A> =
=82=C5=82=CD=81A=83C=83=93=83^=83v=83=8A=83^=82=F0=81u=8Cp=91=B1=93n=82=B5=
=83X=83^=83C=83=8B=81v=82=C5=8F=91=82=AB=92=BC=82=B7=82=B1=82=C6=82=C5=81=
u=8Cp=91=B1=81v=82=F0=8E=C0=91=95=82=B5=82=DC=82=B5=82=BD=81BSECD=20
=89=BC=91z=83}=83V=83=93=82=CC=8F=EA=8D=87=81A=8Cp=91=B1=82=F0=93=B1=93=FC=
=82=B7=82=E9=82=CC=82=CD=82=C6=82=C4=82=E0=8A=C8=92P=82=C5=82=B7=81B=8Cp=91=
=B1=82=CC=8E=E6=93=BE=82=CD=83=8C=83W=83X=83^ S, E, C, D=20
=82=F0=95=DB=91=B6=82=B7=82=E9=82=BE=82=AF=82=C5=82=E6=82=A2=82=CC=82=C5=82=
=B7=81B=8Cp=91=B1=82=F0=8D=C4=8AJ=82=B7=82=E9=82=CC=82=E0=95=DB=91=B6=82=B5=
=82=C4=82=A8=82=A2=82=BD=8Ae=83=8C=83W=83X=83^=82=F0=8C=B3=82=C9=96=DF=82=
=B7=82=BE=82=AF=82=C5=82=B7=82=DD=82=DC=82=B7=81B=20
<P>=82=C8=82=A8=81A=82=B1=82=CC=83v=83=8D=83O=83=89=83=80=82=CD=90=D9=8D=EC=
=82=CC=83y=81[=83W <A=20
href=3D"http://www.geocities.jp/m_hiroi/func/scheme.html">=82=A8=8BC=8Ay =
Scheme =83v=83=8D=83O=83=89=83~=83=93=83O=93=FC=96=E5</A>=20
<A href=3D"http://www.geocities.jp/m_hiroi/func/abcscm35.html">micro =
Scheme=20
=83R=83=93=83p=83C=83=89=82=CC=8D=EC=90=AC (3)</A> =
=82=CC=83v=83=8D=83O=83=89=83=80=82=F0 Common Lisp =
=82=C5=8F=91=82=AB=92=BC=82=B5=82=BD=82=E0=82=CC=82=C5=82=B7=81B=93=E0=97=
e=82=CD=8Fd=95=A1=82=B5=82=DC=82=B7=82=AA=81A=82=B2=97=B9=8F=B3=82=AD=82=BE=
=82=B3=82=A2=82=DC=82=B9=81B=20
<H4>=81=9Ccall/cc =82=CC=83R=83=93=83p=83C=83=8B</H4>
<P>=82=BB=82=EA=82=C5=82=CD=83v=83=8D=83O=83=89=83=80=82=F0=8D=EC=82=E8=82=
=DC=82=B5=82=E5=82=A4=81B=89=BC=91z=83}=83V=83=93=82=C9=8Cp=91=B1=82=F0=8E=
=E6=93=BE=82=B7=82=E9=96=BD=97=DF ldct =
=82=F0=92=C7=89=C1=82=B5=82=DC=82=B7=81Bldct =
=82=CC=8F=F3=91=D4=91J=88=DA=82=F0=8E=A6=82=B5=82=DC=82=B7=81B <PRE =
class=3Ditem>s e (ldct code . c) d =3D&gt; ((continuation s e code d) . =
s) e c d
</PRE>
<P>=8Cp=91=B1=82=CD=83=8A=83X=83g=82=C5=95\=82=B5=82=DC=82=B7=81B=90=E6=93=
=AA=82=C9=83V=83=93=83{=83=8B continuation =
=82=F0=95t=82=AF=82=C4=81A=82=BB=82=CC=8C=E3=82=EB=82=C9 s, e, code, d =
=82=F0=8Ai=94[=82=B5=82=DC=82=B7=81Bcode =82=CD=20
call/cc =
=82=CC=82=A0=82=C6=82=C9=8E=C0=8Ds=82=B7=82=E9=83R=81[=83h=82=C5=81Acall/=
cc =
=82=F0=83R=83=93=83p=83C=83=8B=82=B7=82=E9=82=C6=82=AB=82=C9=83Z=83b=83g=82=
=B3=82=EA=82=DC=82=B7=81B=83R=81[=83h c =82=C9=82=CD call/cc=20
=82=CC=88=F8=90=94=82=F0=95]=89=BF=82=B5=82=C4=81A=82=BB=82=EA=82=F0=8C=C4=
=82=D1=8Fo=82=B7=96=BD=97=DF=82=AA=83Z=83b=83g=82=B3=82=EA=82=DC=82=B7=81=
B=82=B1=82=CC=82=C6=82=AB=81A=90=B6=90=AC=82=B5=82=BD=8Cp=91=B1=82=AA=88=F8=
=90=94=82=C6=82=B5=82=C4=93n=82=B3=82=EA=82=DC=82=B7=81B=20
<P>call/cc =
=82=CC=83R=83=93=83p=83C=83=8B=82=CD=8E=9F=82=CC=82=E6=82=A4=82=C9=82=C8=82=
=E8=82=DC=82=B7=81B <PRE class=3Dlist>=83=8A=83X=83g : call/cc =
=82=CC=83R=83=93=83p=83C=83=8B

(defun comp (expr env code)
  ...
        ((eq (car expr) 'call/cc)
         (list* 'ldct code 'args 1 (comp (cadr expr) env (cons 'app =
code))))
  ...
)
</PRE>
<P>call/cc =82=CC=8C=E3=82=C9=8E=C0=8Ds=82=B7=82=E9=96=BD=97=DF=82=CD =
comp =82=CC=88=F8=90=94 code =
=82=C9=8Ai=94[=82=B3=82=EA=82=C4=82=A2=82=DC=82=B7=81B=96=BD=97=DF ldct =
=82=CC=82=A0=82=C6=82=C9 code =
=82=F0=8Ai=94[=82=B5=82=DC=82=B7=81Bcall/cc=20
=82=CC=88=F8=90=94=82=C9=93n=82=B3=82=EA=82=E9=92l=82=CD=8A=D6=90=94=82=C5=
=81A=82=BB=82=CC=8A=D6=90=94=82=C9=90=B6=90=AC=82=B5=82=BD=8Cp=91=B1=82=F0=
=93n=82=B5=82=DC=82=B7=81Bargs =
=82=C5=83X=83^=83b=83N=82=C9=90=CF=82=DC=82=EA=82=BD=8Cp=91=B1=82=F0=8E=E6=
=82=E8=8Fo=82=B5=82=C4=83=8A=83X=83g=82=C9=8Ai=94[=82=B5=82=DC=82=B7=81B=82=
=BB=82=B5=82=C4=81Acall/cc =82=CC=88=F8=90=94=20
(cadr expr) =82=F0 comp =
=82=C5=83R=83=93=83p=83C=83=8B=82=B5=82=DC=82=B7=81B=92l=82=CD=8A=D6=90=94=
=82=C9=82=C8=82=E9=82=CD=82=B8=82=C8=82=CC=82=C5=81A=82=BB=82=EA=82=F0=96=
=BD=97=DF app =82=C5=8C=C4=82=D1=8Fo=82=B5=82=DC=82=B7=81B=20
<H4>=81=9Cldct =82=CC=92=C7=89=C1=82=C6 app =82=CC=8FC=90=B3</H4>
<P>=8E=9F=82=CD=89=BC=91z=83}=83V=83=93 vm =
=82=F0=8FC=90=B3=82=B5=82=DC=82=B7=81B=96=BD=97=DF ldct =
=82=F0=92=C7=89=C1=82=B5=82=C4=81A=8Cp=91=B1=82=F0=8E=C0=8Ds=82=C5=82=AB=82=
=E9=82=E6=82=A4=82=C9=96=BD=97=DF app =
=82=F0=8FC=90=B3=82=B5=82=DC=82=B7=81B=83v=83=8D=83O=83=89=83=80=82=CD=8E=
=9F=82=CC=82=E6=82=A4=82=C9=82=C8=82=E8=82=DC=82=B7=81B <PRE =
class=3Dlist>=83=8A=83X=83g : =
=89=BC=91z=83}=83V=83=93=82=C9=8Cp=91=B1=82=CC=8F=88=97=9D=82=F0=92=C7=89=
=C1

(defun vm (s e c d)
  (loop
    (case (pop c)
      ...
      ((ldct)
       (push (list 'continuation s e (pop c) d) s))
      ...
      ((app)
       (let ((clo (pop s)) (lvar (pop s)))
         (case (pop clo)
           ((primitive)
            (push (apply (car clo) lvar) s))
           ((continuation)
            (setq s (cons (car lvar) (car clo))
                  e (cadr clo)
                  c (caddr clo)
                  d (cadddr clo)))
           (t
            (push (list s e c) d)
            (setq s nil
                  e (cons lvar (cadr clo))
                  c (car clo))))))
      ...
  )))
</PRE>
<P>ldct =
=82=CD=8F=F3=91=D4=91J=88=DA=82=F0=82=BB=82=CC=82=DC=82=DC=83v=83=8D=83O=83=
=89=83=80=82=B5=82=BD=82=BE=82=AF=82=C5=82=B7=81B=8Cp=91=B1=82=F0=8E=C0=8D=
s=82=B7=82=E9=8F=EA=8D=87=81A=8Cp=91=B1=82=C9=93n=82=B5=82=BD=88=F8=90=94=
 (1 =8C=C2) =82=AA call/cc =
=82=CC=95=D4=82=E8=92l=82=C6=82=C8=82=E8=82=DC=82=B7=81BSECD=20
=89=BC=91z=83}=83V=83=93=82=CC=8F=EA=8D=87=81A=95=D4=82=E8=92l=82=CD=83X=83=
^=83b=83N=82=C9=90=CF=82=DC=82=EA=82=DC=82=B7=81B=95=DB=91=B6=82=B5=82=C4=
=82=A8=82=A2=82=BD S, E, C, D =
=83=8C=83W=83X=83^=82=CC=92l=82=F0=8C=B3=82=C9=96=DF=82=B5=82=C4=81A=83X=83=
^=83b=83N=82=C9=88=F8=90=94=82=CC=92l (car lvar)=20
=82=F0=92=C7=89=C1=82=B5=82=DC=82=B7=81B=82=B1=82=EA=82=C5=83v=83=8D=83O=83=
=89=83=80=82=CC=8E=C0=8Ds=82=F0=8D=C4=8AJ=82=B7=82=E9=82=B1=82=C6=82=AA=82=
=C5=82=AB=82=DC=82=B7=81B=20
<H4>=81=9Capply =82=CC=8E=C0=91=95</H4>
<P>=8D=C5=8C=E3=82=C9=8D=82=8AK=8A=D6=90=94 apply =
=82=F0=92=C7=89=C1=82=B5=82=DC=82=B7=81Bapply =
=82=CD=8Cp=91=B1=82=CC=83e=83X=83g=82=C5=8Eg=97p=82=B5=82=DC=82=B7=81Bapp=
ly =
=82=CD=88=F8=90=94=82=C9=93=C1=95=CA=82=C8=8F=88=97=9D=82=AA=95K=97v=82=C9=
=82=C8=82=E9=82=CC=82=C5=81A=89=BC=91z=83}=83V=83=93=82=C9=90V=82=B5=82=A2=
=96=BD=97=DF=20
args-ap =
=82=F0=92=C7=89=C1=82=B5=82=DC=82=B7=81B=83R=83=93=83p=83C=83=8B=82=CD=8E=
=9F=82=CC=82=E6=82=A4=82=C9=82=C8=82=E8=82=DC=82=B7=81B <PRE =
class=3Dlist>=83=8A=83X=83g : apply =82=CC=83R=83=93=83p=83C=83=8B

(defun comp (expr env code)
  ...
        ((eq (car expr) 'apply)
         (complis (cddr expr)
                  env
                  (list* 'args-ap
                         (length (cddr expr))
                         (comp (cadr expr) env (cons 'app code)))))
  ...
)
</PRE>
<P>=8A=D6=90=94=8C=C4=82=D1=8Fo=82=B5=82=CC=8F=88=97=9D=82=C6=93=AF=97l=82=
=C9=81Acomplis =
=82=C5=88=F8=90=94=82=F0=95]=89=BF=82=B7=82=E9=83R=81[=83h=82=F0=90=B6=90=
=AC=82=B5=82=DC=82=B7=81B=82=B1=82=CC=82=C6=82=AB=81A=88=F8=90=94=82=CD =
(cddr expr)=20
=82=C9=82=C8=82=E9=82=B1=82=C6=82=C9=92=8D=88=D3=82=B5=82=C4=82=AD=82=BE=82=
=B3=82=A2=81B=82=BB=82=B5=82=C4=81A=96=BD=97=DF args-ap =
=82=CC=82=A0=82=C6=82=C9=81A2 =94=D4=96=DA=82=CC=88=F8=90=94 (cadr expr) =
=82=F0 comp =
=82=C5=83R=83=93=83p=83C=83=8B=82=B5=81A=82=BB=82=EA=82=F0=96=BD=97=DF =
app=20
=82=C5=8C=C4=82=D1=8Fo=82=B5=82=DC=82=B7=81B=20
<P>=8E=9F=82=CD=89=BC=91z=83}=83V=83=93 vm =82=C9=96=BD=97=DF args-ap =
=82=F0=92=C7=89=C1=82=B5=82=DC=82=B7=81B <PRE =
class=3Dlist>=83=8A=83X=83g : =96=BD=97=DF args-ap =82=CC=92=C7=89=C1

(defun vm (s e c d)
  (loop
    (case (pop c)
      ...
      ((args-ap)
       (let ((a (copy-list (pop s))))
         (dotimes (n (1- (pop c)) (push a s))
           (push (pop s) a))))
      ...
  )))
</PRE>
<P>apply =
=82=C9=97^=82=A6=82=E7=82=EA=82=E9=8D=C5=8C=E3=82=CC=88=F8=90=94=82=CD=83=
=8A=83X=83g=82=C5=82=B7=81Bargs-ap =
=82=CD=8D=C5=8C=E3=82=CC=88=F8=90=94=82=CC=90=E6=93=AA=82=C9=81A=8D=A1=82=
=DC=82=C5=82=CC=88=F8=90=94=82=F0=92=C7=89=C1=82=B5=82=C4=95=D4=82=B5=82=DC=
=82=B7=81B=82=B1=82=CC=82=C6=82=AB=81A=8D=C5=8C=E3=82=CC=88=F8=90=94 =
(=83=8A=83X=83g) =82=F0=20
copy-list =
=82=C5=83R=83s=81[=82=B5=82=C8=82=A2=82=C6=81A=89=C2=95=CF=8C=C2=88=F8=90=
=94=82=CC=8A=D6=90=94=82=F0=8C=C4=82=D1=8Fo=82=B5=82=C4=88=F8=90=94=82=CC=
=92l=82=F0=8F=91=82=AB=8A=B7=82=A6=82=E9=82=C6=82=AB=82=C9=95s=8B=EF=8D=87=
=82=AA=94=AD=90=B6=82=B5=82=DC=82=B7=81B=20
<P>=8A=C8=92P=82=C8=8E=C0=8Ds=97=E1=82=F0=8E=A6=82=B5=82=DC=82=B7=81B =
<PRE>&gt;&gt;&gt; (apply cons '(1 2))
(1 . 2)

&gt;&gt;&gt; (apply cons 1 '(2))
(1 . 2)

&gt;&gt;&gt; (define a '(1 2 3 4 5))
A

&gt;&gt;&gt; (define foo (lambda (a b . c) (set! a 10) (set! b 20) (set! =
c 30)))
FOO

&gt;&gt;&gt; (apply foo a)
30

&gt;&gt;&gt; a
(1 2 3 4 5)
</PRE>
<P>apply =82=C5=8A=D6=90=94 foo =
=82=F0=8C=C4=82=D1=8Fo=82=B7=82=C6=82=AB=81A=8D=C5=8C=E3=82=CC=88=F8=90=94=
 (=83=8A=83X=83g) =
=82=F0=83R=83s=81[=82=B5=82=C8=82=A2=82=C6=81A=95=CF=90=94 a =
=82=CC=92l=82=AA (10 20 . 30)=20
=82=C9=8F=91=82=AB=8A=B7=82=A6=82=E7=82=EA=82=C4=82=B5=82=DC=82=A2=82=DC=82=
=B7=81B=20
<P>=8D=C5=8C=E3=82=C9=81A=8Cp=91=B1=82=CC=83e=83X=83g=82=C5=8Eg=82=A4=82=BD=
=82=DF *global-environment* =82=C9=8A=D6=90=94 display =82=C6 newline=20
=82=F0=92=C7=89=C1=82=B5=82=DC=82=B7=81B=82=B1=82=EA=82=C5=83v=83=8D=83O=83=
=89=83=80=82=CC=8FC=90=B3=82=CD=8A=AE=97=B9=82=C5=82=B7=81B=20
<H4>=81=9C=8A=C8=92P=82=C8=8E=C0=8Ds=97=E1</H4>
<P>=82=BB=82=EA=82=C5=82=CD=8E=C0=8D=DB=82=C9=8Cp=91=B1=82=F0=8Eg=82=C1=82=
=C4=82=DD=82=DC=82=B5=82=E5=82=A4=81B=82=C8=82=A8=81A=8Cp=91=B1=82=CC=8E=C0=
=8Ds=97=E1=82=CD=90=D9=8D=EC=82=CC=83y=81[=83W <A=20
href=3D"http://www.geocities.jp/m_hiroi/clisp/clispb14.html">Common Lisp =
=82=C5=8D=EC=82=E9 micro=20
Scheme (3)</A> =
=82=C5=8D=EC=90=AC=82=B5=82=BD=83v=83=8D=83O=83=89=83=80=82=C6=82=DC=82=C1=
=82=BD=82=AD=93=AF=82=B6=82=C5=82=B7=81B=83C=83=93=83^=83v=83=8A=83^=82=C5=
=82=E0=83R=83=93=83p=83C=83=89=82=C5=82=E0=8Cp=91=B1=82=CC=93=AE=8D=EC=82=
=CD=93=AF=82=B6=82=C9=82=C8=82=E8=82=DC=82=B7=81B <PRE>&gt;&gt;&gt; =
(define a false)
A
&gt;&gt;&gt; (define list (lambda x x))
LIST
&gt;&gt;&gt; (list 'a 'b (call/cc (lambda (k) (set! a k) 'c)) 'd)
(A B C D)
&gt;&gt;&gt; (a 'e)
(A B E D)
&gt;&gt;&gt; (a 'f)
(A B F D)
</PRE>
<P>=95=CF=90=94 a =
=82=C9=8E=E6=82=E8=8Fo=82=B5=82=BD=8Cp=91=B1=82=F0=83Z=83b=83g=82=B5=82=DC=
=82=B7=81B=82=B1=82=CC=8F=EA=8D=87=81A=8Cp=91=B1=82=CD (list a b [ ] 'd) =
=82=C9=82=C8=82=E8=82=DC=82=B7=81Blist =
=82=CC=8F=88=97=9D=82=BE=82=AF=82=C5=82=CD=82=C8=82=AD=81A'd=20
=82=F0=95]=89=BF=82=B7=82=E9=8F=88=97=9D=82=E0=8Ec=82=C1=82=C4=82=A2=82=DC=
=82=B7=81B=8Cp=91=B1 a =
=82=C9=88=F8=90=94=82=F0=93n=82=B5=82=C4=95]=89=BF=82=B7=82=E9=82=C6=81A[=
 ] =
=82=CC=95=94=95=AA=82=C9=8Cp=91=B1=82=CC=88=F8=90=94=82=AA=83Z=83b=83g=82=
=B3=82=EA=81A'd =82=F0=95]=89=BF=82=B5=82=C4 list=20
=82=C9=93n=82=B3=82=EA=82=DC=82=B7=81B=82=B5=82=BD=82=AA=82=C1=82=C4=81A(=
a 'e) =82=F0=95]=89=BF=82=B7=82=E9=82=C6 (a b e d) =
=82=C9=82=C8=82=E8=81A(a 'f) =82=F0=95]=89=BF=82=B7=82=E9=82=C6 (a b f =
d) =82=C9=82=C8=82=E8=82=DC=82=B7=81B=20
<H4>=81=9C=91=E5=88=E6=92E=8Fo</H4>
<P>=8E=9F=82=CD=91=E5=88=E6=92E=8Fo=82=F0=8E=8E=82=B5=82=C4=82=DD=82=DC=82=
=B5=82=E5=82=A4=81B <PRE class=3Dlist>=83=8A=83X=83g : =
=91=E5=88=E6=92E=8Fo

(define bar1 (lambda (cont) (display "call bar1") (newline)))
(define bar2 (lambda (cont) (display "call bar2") (newline) (cont =
false)))
(define bar3 (lambda (cont) (display "call bar3") (newline)))
(define test (lambda (cont) (bar1 cont) (bar2 cont) (bar3 cont)))
</PRE><PRE>&gt;&gt;&gt; (call/cc (lambda (cont) (test cont)))
call bar1
call bar2
FALSE
</PRE>
<P>bar2 =
=82=A9=82=E7=83g=83b=83v=83=8C=83x=83=8B=82=D6=92E=8Fo=82=B7=82=E9=82=CC=82=
=C5=81Abar3 =
=82=CD=8C=C4=82=D1=8Fo=82=B3=82=EA=82=C4=82=A2=82=DC=82=B9=82=F1=81B=20
<H4>=81=9C=8CJ=82=E8=95=D4=82=B5=82=A9=82=E7=82=CC=92E=8Fo</H4>
<P>=93=96=91R=82=C5=82=B7=82=AA=81A=8CJ=82=E8=95=D4=82=B5=82=A9=82=E7=92E=
=8Fo=82=B7=82=E9=82=B1=82=C6=82=E0=82=C5=82=AB=82=DC=82=B7=81B=8E=9F=82=CC=
=97=E1=82=F0=8C=A9=82=C4=82=AD=82=BE=82=B3=82=A2=81B <PRE =
class=3Dlist>=83=8A=83X=83g : do =
=82=A9=82=E7=92E=8Fo=82=B7=82=E9=8F=EA=8D=87

(define find-do
  (lambda (fn ls)
    (call/cc
      (lambda (k)
        (do ((xs ls (cdr xs)))
            ((null? xs) false)
          (if (fn (car xs)) (k (car xs))))))))
</PRE>
<P>=83=8A=83X=83g ls =82=A9=82=E7=8A=D6=90=94 fn =
=82=AA=90^=82=F0=95=D4=82=B7=97v=91f=82=F0=92T=82=B5=82=DC=82=B7=81B=8Cp=91=
=B1=82=CC=83e=83X=83g=82=C6=82=A2=82=A4=82=B1=82=C6=82=C5=81A=82=A0=82=A6=
=82=C4 do =
=82=F0=8Eg=82=C1=82=C4=8E=C0=91=95=82=B5=82=C4=82=A2=82=DC=82=B7=81Bfn =
=82=AA=90^=82=F0=95=D4=82=B7=8F=EA=8D=87=81A=8Cp=91=B1 k=20
=82=C5=82=BB=82=CC=97v=91f=82=F0=95=D4=82=B5=82=DC=82=B7=81B=82=BB=82=EA=82=
=C5=82=CD=8E=C0=8Ds=82=B5=82=C4=82=DD=82=DC=82=B5=82=E5=82=A4=81B =
<PRE>&gt;&gt;&gt; (find-do (lambda (x) (eq? 'c x)) '(a b c d e))
C
&gt;&gt;&gt; (find-do (lambda (x) (eq? 'c x)) '(a b d e f))
FALSE
</PRE>
<P>=82=E0=82=BF=82=EB=82=F1=8D=82=8AK=8A=D6=90=94=82=A9=82=E7=82=E0=92E=8F=
o=82=B7=82=E9=82=B1=82=C6=82=AA=82=C5=82=AB=82=DC=82=B7=81B <PRE =
class=3Dlist>=83=8A=83X=83g : map =
=82=A9=82=E7=92E=8Fo=82=B7=82=E9=8F=EA=8D=87

(define map-check (lambda (fn chk ls)
  (call/cc
    (lambda (k)
      (map (lambda (x) (if (chk x) (k '()) (fn x))) ls)))))
</PRE><PRE>&gt;&gt;&gt; (map-check (lambda (x) (cons x x)) (lambda (x) =
(eq? x 'e)) '(a b c d e f))
NIL
&gt;&gt;&gt; (map-check (lambda (x) (cons x x)) (lambda (x) (eq? x 'e)) =
'(a b c d f))
((A . A) (B . B) (C . C) (D . D) (F . F))
</PRE>
<P>=8A=D6=90=94 chk =
=82=AA=90^=82=C6=82=C8=82=E9=97v=91f=82=AA=82=A0=82=E9=8F=EA=8D=87=81A=8F=
=88=97=9D=82=F0=92=86=92f=82=B5=82=C4=8B=F3=83=8A=83X=83g=82=F0=95=D4=82=B5=
=82=DC=82=B7=81B=82=B1=82=EA=82=E0=90=B3=8F=ED=82=C9=93=AE=82=A2=82=C4=82=
=A2=82=DC=82=B7=82=CB=81B=20
<H4>=81=9C=8D=C4=8BA=8C=C4=82=D1=8Fo=82=B5=82=A9=82=E7=82=CC=92E=8Fo</H4>=

<P>=8D=C4=8BA=8C=C4=82=D1=8Fo=82=B5=82=A9=82=E7=92E=8Fo=82=B7=82=E9=82=B1=
=82=C6=82=E0=8A=C8=92P=82=C5=82=B7=81B <PRE class=3Dlist>=83=8A=83X=83g =
: flatten =
=82=CC=8D=C4=8BA=8C=C4=82=D1=8Fo=82=B5=82=A9=82=E7=92E=8Fo=82=B7=82=E9=8F=
=EA=8D=87

(define flatten (lambda (ls)
  (call/cc
    (lambda (cont)
      (letrec ((flatten-sub
                (lambda (ls)
                  (cond ((null? ls) '())
                        ((not (pair? ls)) (list ls))
                        ((null? (car ls)) (cont '()))
                        (else (append (flatten-sub (car ls))
                                      (flatten-sub (cdr ls))))))))
        (flatten-sub ls))))))
</PRE>
<P>=8A=D6=90=94 flatten =
=82=CD=83=8A=83X=83g=82=F0=95=BD=92R=89=BB=82=B5=82=DC=82=B7=81B=82=BD=82=
=BE=82=B5=81A=97v=91f=82=C9=8B=F3=83=8A=83X=83g=82=AA=8A=DC=82=DC=82=EA=82=
=C4=82=A2=82=E9=8F=EA=8D=87=82=CD=8B=F3=83=8A=83X=83g=82=F0=95=D4=82=B5=82=
=DC=82=B7=81Bflatten =82=CD=8Cp=91=B1 cont=20
=82=F0=8E=E6=82=E8=8Fo=82=B5=82=C4=8B=C7=8F=8A=8A=D6=90=94 flatten-sub =
=82=C9=93n=82=B5=82=DC=82=B7=81Bflatten-sub =
=82=CD=8B=F3=83=8A=83X=83g=82=F0=8C=A9=82=C2=82=AF=82=BD=82=E7=8Cp=91=B1 =
cont=20
=82=F0=95]=89=BF=82=B5=82=DC=82=B7=81B=82=BB=82=A4=82=B7=82=E9=82=C6=81A=8D=
=C4=8BA=8C=C4=82=D1=8Fo=82=B5=82=CC=8F=88=97=9D=82=CD=94j=8A=FC=82=B3=82=EA=
=82=C4 flatten =82=CC=8F=88=97=9D=82=C9=96=DF=82=E8=81Acont =
=82=C9=93n=82=B5=82=BD=8B=F3=83=8A=83X=83g=82=AA=95=D4=82=E8=92l=82=C6=82=
=C8=82=E8=82=DC=82=B7=81B <PRE>&gt;&gt;&gt; (flatten '(a (b (c (d . e) =
f) g) h))
(A B C D E F G H)
&gt;&gt;&gt; (flatten '(a (b (c (d () . e) f) g) h))
NIL
</PRE>
<H4>=81=9C=83C=83e=83=8C=81[=83^=82=CC=90=B6=90=AC</H4>
<P>=8D=C5=8C=E3=82=C9=81A=83C=83e=83=8C=81[=83^=82=F0=90=B6=90=AC=82=B7=82=
=E9=8A=D6=90=94 make-iter =82=F0=8E=8E=82=B5=82=C4=82=DD=82=DC=82=B7=81B =
<PRE class=3Dlist>=83=8A=83X=83g : =
=83C=83e=83=8C=81[=83^=82=F0=90=B6=90=AC=82=B7=82=E9=8A=D6=90=94

(define (make-iter proc . args)
  (letrec ((iter
            (lambda (return)
              (apply=20
                proc
                (lambda (x)             ; =
=8D=82=8AK=8A=D6=90=94=82=C9=93n=82=B7=8A=D6=90=94=82=CC=96{=91=CC
                  (set! return          ; =
=92E=8Fo=90=E6=8Cp=91=B1=82=CC=8F=91=82=AB=8A=B7=82=A6
                   (call/cc
                    (lambda (cont)
                      (set! iter cont)  ; =
=8Cp=91=B1=82=CC=8F=91=82=AB=8A=B7=82=A6
                      (return x)))))
                args)
                ; =8FI=97=B9=8C=E3=82=CD=8Cp=91=B1 return =82=C5=92E=8Fo
                (return false))))
    (lambda ()
      (call/cc
        (lambda (cont) (iter cont))))))
</PRE><PRE class=3Dlist>=83=8A=83X=83g : =
=96=D8=82=CC=8D=82=8AK=8A=D6=90=94

(define (for-each-tree fn ls)
  (let loop ((ls ls))
    (cond ((null? ls) '())
          ((pair? ls)
           (loop (car ls))
           (loop (cdr ls)))
          (else (fn ls)))))
</PRE>
<P>=90=D9=8D=EC=82=CC=83y=81[=83W <A =
href=3D"http://www.geocities.jp/m_hiroi/func/scheme.html">=82=A8=8BC=8Ay =
Scheme=20
=83v=83=8D=83O=83=89=83~=83=93=83O=93=FC=96=E5</A> <A=20
href=3D"http://www.geocities.jp/m_hiroi/func/abcscm20.html">=8Cp=91=B1=82=
=C6=8Cp=91=B1=93n=82=B5=83X=83^=83C=83=8B</A>=20
=82=C5=8D=EC=90=AC=82=B5=82=BD=83v=83=8D=83O=83=89=83=80=82=C6=93=AF=82=B6=
=82=C5=82=B7=81B=82=BB=82=EA=82=C5=82=CD=8E=C0=8Ds=82=B5=82=C4=82=DD=82=DC=
=82=B5=82=E5=82=A4=81B <PRE>&gt;&gt;&gt; (define a (make-iter =
for-each-tree '(a (b (c (d . e) f) g) h)))
A
&gt;&gt;&gt; (a)
A
&gt;&gt;&gt; (a)
B
&gt;&gt;&gt; (a)
C
&gt;&gt;&gt; (a)
D
&gt;&gt;&gt; (a)
E
&gt;&gt;&gt; (a)
F
&gt;&gt;&gt; (a)
G
&gt;&gt;&gt; (a)
H
&gt;&gt;&gt; (a)
FALSE
</PRE>
<P>=90=B3=8F=ED=82=C9=93=AE=8D=EC=82=B5=82=C4=82=A2=82=DC=82=B7=82=CB=81B=
=20
<P>=8D=A1=89=F1=82=CD=82=B1=82=B1=82=DC=82=C5=82=C5=82=B7=81B=8E=9F=89=F1=
=82=CD=81u=96=96=94=F6=8D=C4=8BA=8D=C5=93K=89=BB=81v=82=CC=8E=C0=91=95=82=
=C9=92=A7=90=ED=82=B5=82=C4=82=DD=82=DC=82=B5=82=E5=82=A4=81B=20
<HR>

<H4><A =
name=3Dlist1>=81=9C=83v=83=8D=83O=83=89=83=80=83=8A=83X=83g=82P</A></H4><=
PRE class=3Dlist>;
; secd.l : SECD =89=BC=91z=83}=83V=83=93=82=C9=82=E6=82=E9 Scheme =
=83R=83=93=83p=83C=83=89
;
;          (1) =8A=EE=96{=8B@=94\=82=CC=8E=C0=91=95
;          (2) =93`=93=9D=93I=82=C8=83}=83N=83=8D=82=CC=8E=C0=91=95
;          (3) =8Cp=91=B1=82=CC=8E=C0=91=95
;
;          Copyright (C) 2009 Makoto Hiroi
;

; =91=E5=88=E6=95=CF=90=94
(defvar *global-environment* nil)

; =95=CF=90=94=82=CC=88=CA=92u=82=F0=8B=81=82=DF=82=E9
(defun position-var (sym ls)
  (labels ((iter (i ls)
             (cond ((null ls) nil)
                   ((symbolp ls)
                    (if (eq sym ls) (- (1+ i)) nil))
                   ((eq sym (car ls)) i)
                   (t (iter (1+ i) (cdr ls))))))
    (iter 0 ls)))

; =
=83t=83=8C=81[=83=80=82=C6=95=CF=90=94=82=CC=88=CA=92u=82=F0=8B=81=82=DF=82=
=E9
(defun location (sym ls)
  (labels ((iter (i ls)
             (if (null ls)
                 nil
               (let ((j (position-var sym (car ls))))
                 (if j
                     (cons i j)
                   (iter (1+ i) (cdr ls)))))))
    (iter 0 ls)))

; =8E=A9=8C=C8=95]=89=BF=83t=83H=81[=83=80=82=A9
(defun self-evaluation-p (expr)
  (and (atom expr) (not (symbolp expr))))

; =83}=83N=83=8D=82=A9
(defun macro-p (expr)
  (let ((val (assoc expr *global-environment*)))
    (and val (consp (cdr val)) (eq 'macro (cadr val)))))

; =83}=83N=83=8D=82=CC=83R=81[=83h=82=F0=8E=E6=82=E8=8Fo=82=B7
(defun get-macro-code (expr)
  (caddr (get-gvar expr)))

; S =8E=AE=82=F0=83R=83=93=83p=83C=83=8B=82=B7=82=E9
(defun compile-expr (expr)
  (comp expr '() '(stop)))

; =83R=83=93=83p=83C=83=8B=96{=91=CC
(defun comp (expr env code)
  (cond ((self-evaluation-p expr)
         (list* 'ldc expr code))
        ((symbolp expr)
         (let ((pos (location expr env)))
           (if pos
               ; =8B=C7=8F=8A=95=CF=90=94
               (list* 'ld pos code)
             ; =91=E5=88=E6=95=CF=90=94
             (list* 'ldg expr code))))
        ((eq (car expr) 'quote)
         (list* 'ldc (cadr expr) code))
        ((eq (car expr) 'if)
         (let ((t-clause (comp (caddr expr) env '(join)))
               (f-clause
                (if (null (cdddr expr))
                    (list 'ldc '*undef* 'join)
                  (comp (cadddr expr) env '(join)))))
           (comp (cadr expr) env (list* 'sel t-clause f-clause code))))
        ((eq (car expr) 'lambda)
         (let ((body (comp-body (cddr expr) (cons (cadr expr) env) =
'(rtn))))
           (list* 'ldf body code)))
        ((eq (car expr) 'define)
         (comp (caddr expr) env (list* 'def (cadr expr) code)))
        ((eq (car expr) 'define-macro)
         (comp (caddr expr) env (list* 'defm (cadr expr) code)))
        ((eq (car expr) 'set!)
         (let ((pos (location (cadr expr) env)))
           (if pos
               ; =8B=C7=8F=8A=95=CF=90=94
               (comp (caddr expr) env (list* 'lset pos code))
             ; =91=E5=88=E6=95=CF=90=94
             (comp (caddr expr) env (list* 'gset (cadr expr) code)))))
        ((eq (car expr) 'call/cc)
         (list* 'ldct code 'args 1 (comp (cadr expr) env (cons 'app =
code))))
        ((eq (car expr) 'apply)
         (complis (cddr expr)
                  env
                  (list* 'args-ap
                         (length (cddr expr))
                         (comp (cadr expr) env (cons 'app code)))))
        ((macro-p (car expr))
         ; =
=83}=83N=83=8D=93W=8AJ=82=B5=82=C4=82=A9=82=E7=83R=83=93=83p=83C=83=8B=82=
=B7=82=E9
         (let ((new-expr (vm '()
                             (list (cdr expr))
                             (get-macro-code (car expr))
                             (list (list '() '() '(stop))))))
           (comp new-expr env code)))
        (t  ; =8A=D6=90=94=8C=C4=82=D1=8Fo=82=B5
         (complis (cdr expr)
                  env
                  (list* 'args
                         (length (cdr expr))
                         (comp (car expr) env (cons 'app code)))))))

; body =82=CC=83R=83=93=83p=83C=83=8B
(defun comp-body (body env code)
  (if (null (cdr body))
      (comp (car body) env code)
    (comp (car body)
          env
          (list* 'pop
                 (comp-body (cdr body) env code)))))

; =
=88=F8=90=94=82=F0=95]=89=BF=82=B7=82=E9=83R=81[=83h=82=F0=90=B6=90=AC=82=
=B7=82=E9
(defun complis (expr env code)
  (if (null expr)
      code
    (comp (car expr) env (complis (cdr expr) env code))))

;;; =89=BC=91z=83}=83V=83=93

; =8B=C7=8F=8A=95=CF=90=94=82=CC=92l=82=F0=8B=81=82=DF=82=E9
(defun get-lvar (e i j)
  (if (&lt;=3D 0 j)
      (nth j (nth i e))
    (nthcdr (- (1+ j)) (nth i e))))

; =8B=C7=8F=8A=95=CF=90=94=82=CC=92l=82=F0=8DX=90V=82=B7=82=E9
(defun set-lvar (e i j val)
  (if (&lt;=3D 0 j)
      (setf (nth j (nth i e)) val)
    (if (=3D j -1)
        (rplaca (nthcdr i e) val)
      (rplacd (nthcdr (- (+ j 2)) (nth i e)) val))))

; =91=E5=88=E6=95=CF=90=94=82=CC=92l=82=F0=8B=81=82=DF=82=E9
(defun get-gvar (sym)
  (let ((val (assoc sym *global-environment*)))
    (if val
        (cdr val)
      (error "unbound variable: ~S" sym))))

; =91=E5=88=E6=95=CF=90=94=82=CC=92l=82=F0=8F=91=82=AB=8A=B7=82=A6=82=E9
(defun set-gvar (sym val)
  (let ((cell (assoc sym *global-environment*)))
    (if cell
        (rplacd cell val)
      (error "unbound variable: " sym))))

; =89=BC=91z=83}=83V=83=93=82=C5=83R=81[=83h=82=F0=8E=C0=8Ds=82=B7=82=E9
(defun vm (s e c d)
  (loop
    (case (pop c)
      ((ld)
       (let ((pos (pop c)))
         (push (get-lvar e (car pos) (cdr pos)) s)))
      ((ldc)
       (push (pop c) s))
      ((ldg)
       (push (get-gvar (pop c)) s))
      ((ldf)
       (push (list 'closure (pop c) e) s))
      ((ldct)
       (push (list 'continuation s e (pop c) d) s))
      ((lset)
       (let ((pos (pop c)))
         (set-lvar e (car pos) (cdr pos) (car s))))
      ((gset)
       (set-gvar (pop c) (car s)))
      ((app)
       (let ((clo (pop s)) (lvar (pop s)))
         (case (pop clo)
           ((primitive)
            (push (apply (car clo) lvar) s))
           ((continuation)
            (setq s (cons (car lvar) (car clo))
                  e (cadr clo)
                  c (caddr clo)
                  d (cadddr clo)))
           (t
            (push (list s e c) d)
            (setq s nil
                  e (cons lvar (cadr clo))
                  c (car clo))))))
      ((rtn)
       (let ((save (pop d)))
         (setq s (cons (car s) (car save))
               e (cadr save)
               c (caddr save))))
      ((sel)
       (let ((t-clause (pop c))
             (e-clause (pop c)))
         (push c d)
         (setq c (if (eq (pop s) 'false) e-clause t-clause))))
      ((join)
       (setq c (pop d)))
      ((pop) (pop s))
      ((args)
       (let ((a nil))
         (dotimes (n (pop c) (push a s))
           (push (pop s) a))))
      ((args-ap)
       (let ((a (copy-list (pop s))))
         (dotimes (n (1- (pop c)) (push a s))
           (push (pop s) a))))
      ((def)
       (let ((sym (pop c)))
         (push (cons sym (pop s)) *global-environment*)
         (push sym s)))
      ((defm)
       (let ((sym (pop c)))
         (push (cons sym (cons 'macro (pop s))) *global-environment*)
         (push sym s)))
      ((stop) (return (car s)))
      (t (error "unknown opcode")))))

; =91=E5=88=E6=95=CF=90=94
(setq *global-environment*
      (list
       (cons 'true  'true)
       (cons 'false 'false)
       (cons 'nil   'nil)
       (cons 'quit  'quit)
       (list 'car   'primitive #'(lambda (x)
                                   (if (null x)
                                       (error "type error -- car: NIL")
                                     (car x))))
       (list 'cdr   'primitive #'(lambda (x)
                                   (if (null x)
                                       (error "type error -- cdr: NIL")
                                     (cdr x))))
       (list 'cons  'primitive #'cons)
       (list 'eq?   'primitive #'(lambda (x y) (if (eq x y) 'true =
'false)))
       (list 'eqv?  'primitive #'(lambda (x y) (if (eql x y) 'true =
'false)))
       (list 'pair? 'primitive #'(lambda (x) (if (consp x) 'true =
'false)))
       (list 'display 'primitive (lambda (x) (princ x) '*undef*))
       (list 'newline 'primitive (lambda () (terpri) '*undef*))
       ))

;;; read-eval-print-loop

(defun change-readtable ()
  (set-macro-character
   #\`
   #'(lambda (stream char)
       (declare (ignore char))
       (list 'backquote (read stream t nil t))))
  (set-macro-character
   #\,
   #'(lambda (stream char)
       (declare (ignore char))
       (cond ((char=3D (peek-char nil stream) #\@)
              (read-char stream)
              (list 'splice (read stream t nil t)))
             (t (list 'unquote (read stream t nil t)))))))

(defun repl (&amp;rest file-list)
  (unwind-protect
      (progn
        (change-readtable)
        (dolist (file file-list)
          (with-open-file (in file :direction :input)
            (do ((output t))
                ((eq output nil) (terpri))
              (setf output (vm '() '() (compile-expr (read in nil)) =
'()))
              (print output))))
        (do ((output nil))
            ((eq output 'quit))
          (princ "&gt;&gt;&gt; ")
          (force-output)
          (let ((expr (compile-expr (read))))
            (setf output (vm '() '() expr '()))
            (princ output)
            (terpri))))
    (setq *readtable* (copy-readtable nil))))
</PRE>
<HR>

<H4><A =
name=3Dlist2>=81=9C=83v=83=8D=83O=83=89=83=80=83=8A=83X=83g=82Q</A></H4><=
PRE class=3Dlist>;
; mlib.scm : micro Scheme =97p=83=89=83C=83u=83=89=83=8A
;
;            Copyright (C) 2009 Makoto Hiroi
;

;;; =8Fq=8C=EA

(define null? (lambda (x) (eq? x '())))
(define not (lambda (x) (if (eq? x false) true false)))

;;; =83=8A=83X=83g=91=80=8D=EC=8A=D6=90=94

(define cadr (lambda (x) (car (cdr x))))
(define cdar (lambda (x) (cdr (car x))))
(define caar (lambda (x) (car (car x))))
(define cddr (lambda (x) (cdr (cdr x))))
(define cadar (lambda (x) (car (cdr (car x)))))

;
(define list (lambda args args))

; =83=8A=83X=83g=82=CC=8C=8B=8D=87
(define append
  (lambda (xs ys)
    (if (null? xs)
        ys
      (cons (car xs) (append (cdr xs) ys)))))

; =83=8A=83X=83g=82=CC=92T=8D=F5
(define memq
  (lambda (x ls)
    (if (null? ls)
        false
        (if (eq? x (car ls))
            ls
          (memq x (cdr ls))))))

;
(define memv
  (lambda (x ls)
    (if (null? ls)
        false
        (if (eqv? x (car ls))
            ls
          (memv x (cdr ls))))))

; =98A=91z=83=8A=83X=83g=82=CC=92T=8D=F5
(define assq
  (lambda (x ls)
    (if (null? ls)
        false
      (if (eq? x (car (car ls)))
          (car ls)
        (assq x (cdr ls))))))

;
(define assv
  (lambda (x ls)
    (if (null? ls)
        false
      (if (eqv? x (car (car ls)))
          (car ls)
        (assv x (cdr ls))))))

;;; =8D=82=8AK=8A=D6=90=94

; =83}=83b=83v
(define map
  (lambda (fn ls)
    (if (null? ls)
        '()
      (cons (fn (car ls)) (map fn (cdr ls))))))

;
(define map-2
  (lambda (fn xs ys)
    (if (null? xs)
        '()
      (cons (fn (car xs) (car ys)) (map-2 fn (cdr xs) (cdr ys))))))

; =83t=83B=83=8B=83^=81[
(define filter
  (lambda (fn ls)
    (if (null? ls)
        '()
      (if (fn (car ls))
          (cons (car ls) (filter fn (cdr ls)))
        (filter fn (cdr ls))))))

; =8F=F4=82=DD=8D=9E=82=DD
(define fold-right
  (lambda (fn a ls)
    (if (null? ls)
        a
      (fn (car ls) (fold-right fn a (cdr ls))))))

;
(define fold-left
  (lambda (fn a ls)
    (if (null? ls)
        a
      (fold-left fn (fn a (car ls)) (cdr ls)))))

;;; =83}=83N=83=8D

; quasiquote
(define transfer
  (lambda (ls)
    (if (pair? ls)
        (if (pair? (car ls))
            (if (eq? (caar ls) 'unquote)
                (list 'cons (cadar ls) (transfer (cdr ls)))
              (if (eq? (caar ls) 'splice)
                  (list 'append (cadar ls) (transfer (cdr ls)))
                (list 'cons (transfer (car ls)) (transfer (cdr ls)))))
          (list 'cons (list 'quote (car ls)) (transfer (cdr ls))))
      (list 'quote ls))))

(define-macro backquote (lambda (x) (transfer x)))

; let
(define-macro let
  (lambda (args . body)
    (if (pair? args)
        `((lambda ,(map car args) ,@body) ,@(map cadr args))
      ; named-let
      `(letrec ((,args (lambda ,(map car (car body)) ,@(cdr body))))
        (,args ,@(map cadr (car body)))))))

; and
(define-macro and
  (lambda args
    (if (null? args)
        true
      (if (null? (cdr args))
          (car args)
        `(if ,(car args) (and ,@(cdr args)) false)))))

; or
(define-macro or
  (lambda args
    (if (null? args)
        false
      (if (null? (cdr args))
          (car args)
        `(let ((+value+ ,(car args)))
          (if +value+ +value+ (or ,@(cdr args))))))))

; let*
(define-macro let*
  (lambda (args . body)=20
    (if (null? (cdr args))
        `(let (,(car args)) ,@body)
      `(let (,(car args)) (let* ,(cdr args) ,@body)))))

; letrec
(define-macro letrec
  (lambda (args . body)
    (let ((vars (map car args))
          (vals (map cadr args)))
      `(let ,(map (lambda (x) `(,x '*undef*)) vars)
            ,@(map-2 (lambda (x y) `(set! ,x ,y)) vars vals)
            ,@body))))

; begin
(define-macro begin
  (lambda args
    (if (null? args)
        `((lambda () '*undef*))
      `((lambda () ,@args)))))


; cond
(define-macro cond
  (lambda args
    (if (null? args)
        '*undef*
      (if (eq? (caar args) 'else)
          `(begin ,@(cdar args))
        (if (null? (cdar args))
            `(let ((+value+ ,(caar args)))
              (if +value+ +value+ (cond ,@(cdr args))))
          `(if ,(caar args)
               (begin ,@(cdar args))
            (cond ,@(cdr args))))))))

; case
(define-macro case
  (lambda (key . args)
    (if (null? args)
        '*undef*
      (if (eq? (caar args) 'else)
          `(begin ,@(cdar args))
        `(if (memv ,key ',(caar args))
             (begin ,@(cdar args))
           (case ,key ,@(cdr args)))))))

; do
(define-macro do
  (lambda (var-form test-form . args)
    (let ((vars (map car var-form))
          (vals (map cadr var-form))
          (step (map cddr var-form)))
      `(letrec ((loop (lambda ,vars
                              (if ,(car test-form)
                                  (begin ,@(cdr test-form))
                                (begin
                                  ,@args
                                  (loop ,@(map-2 (lambda (x y)
                                                   (if (null? x) y (car =
x)))
                                                 step
                                                 vars)))))))
        (loop ,@vals)))))

; do =82=CC=83e=83X=83g
(define reverse-do
  (lambda (xs)
    (do ((ls xs (cdr ls)) (result '()))
        ((null? ls) result)
      (set! result (cons (car ls) result)))))

; cond =82=CC=83e=83X=83g
(define cond-test
  (lambda (x)
    (cond ((eq? x 'a) 1)
          ((eq? x 'b) 2)
          ((eq? x 'c) 3)
          (else 0))))

; case =82=CC=83e=83X=83g
(define case-test
  (lambda (x)
    (case x
      ((a b c) 1)
      ((d e f) 2)
      ((g h i) 3)
      (else    0))))

;;; =83}=83N=83=8D=82=F0=8Eg=82=C1=82=BD=8A=D6=90=94=82=CC=92=E8=8B`

;
(define reverse
  (lambda (ls)
    (letrec ((iter (lambda (ls a)
                     (if (null? ls)
                         a
                       (iter (cdr ls) (cons (car ls) a))))))
      (iter ls '()))))

;
(define reversei
  (lambda (ls)
    (let loop ((ls ls) (a '()))
      (if (null? ls)
          a
          (loop (cdr ls) (cons (car ls) a))))))

;;; =8Cp=91=B1=82=CC=83e=83X=83g

; =91=E5=88=E6=92E=8Fo
(define bar1 (lambda (cont) (display "call bar1") (newline)))
(define bar2 (lambda (cont) (display "call bar2") (newline) (cont =
false)))
(define bar3 (lambda (cont) (display "call bar3") (newline)))
(define test (lambda (cont) (bar1 cont) (bar2 cont) (bar3 cont)))

; =8CJ=82=E8=95=D4=82=B5=82=A9=82=E7=82=CC=92E=8Fo
(define find-do
  (lambda (fn ls)
    (call/cc
      (lambda (k)
        (do ((xs ls (cdr xs)))
            ((null? xs) false)
          (if (fn (car xs)) (k (car xs))))))))

; =8D=82=8AK=8A=D6=90=94=82=A9=82=E7=82=CC=92E=8Fo
(define map-check (lambda (fn chk ls)
  (call/cc
    (lambda (k)
      (map (lambda (x) (if (chk x) (k '()) (fn x))) ls)))))

; =8D=C4=8BA=8C=C4=82=D1=8Fo=82=B5=82=A9=82=E7=82=CC=92E=8Fo
(define flatten (lambda (ls)
  (call/cc
    (lambda (cont)
      (letrec ((flatten-sub
                (lambda (ls)
                  (cond ((null? ls) '())
                        ((not (pair? ls)) (list ls))
                        ((null? (car ls)) (cont '()))
                        (else (append (flatten-sub (car ls))
                                      (flatten-sub (cdr ls))))))))
        (flatten-sub ls))))))

; =83C=83e=83=8C=81[=83^=82=F0=90=B6=90=AC=82=B7=82=E9=8A=D6=90=94
(define make-iter
 (lambda (proc . args)
  (letrec ((iter
            (lambda (return)
              (apply=20
                proc
                (lambda (x)             ; =
=8D=82=8AK=8A=D6=90=94=82=C9=93n=82=B7=8A=D6=90=94=82=CC=96{=91=CC
                  (set! return          ; =
=92E=8Fo=90=E6=8Cp=91=B1=82=CC=8F=91=82=AB=8A=B7=82=A6
                   (call/cc
                    (lambda (cont)
                      (set! iter cont)  ; =
=8Cp=91=B1=82=CC=8F=91=82=AB=8A=B7=82=A6
                      (return x)))))
                args)
                ; =8FI=97=B9=8C=E3=82=CD=8Cp=91=B1 return =82=C5=92E=8Fo
                (return false))))
    (lambda ()
      (call/cc
        (lambda (cont) (iter cont)))))))

; =96=D8=82=CC=8D=82=8AK=8A=D6=90=94
(define for-each-tree
 (lambda (fn ls)
  (let loop ((ls ls))
    (cond ((null? ls) '())
          ((pair? ls)
           (loop (car ls))
           (loop (cdr ls)))
          (else (fn ls))))))
</PRE></DIV>
<HR>

<CENTER><B>Copyright (C) 2009 Makoto Hiroi<BR>All rights reserved.</B>=20
<HR>
<SMALL>[ <A=20
href=3D"http://www.geocities.jp/m_hiroi/clisp/clispb17.html">PrevPage</A>=
 | <A=20
href=3D"http://www.geocities.jp/m_hiroi/clisp/index.html#chap01">Common =
Lisp</A> |=20
<A =
href=3D"http://www.geocities.jp/m_hiroi/clisp/clispb19.html">NextPage</A>=
 ]=20
</SMALL></CENTER><!-- text below generated by server. PLEASE REMOVE =
--></OBJECT></LAYER>
<DIV></DIV></SPAN></STYLE></NOSCRIPT></TABLE></SCRIPT></APPLET>
<SCRIPT language=3DJavaScript=20
src=3D"http://bc.geocities.yahoo.co.jp/js/geov2.js"></SCRIPT>

<SCRIPT language=3Djavascript>geovisit();</SCRIPT>
<NOSCRIPT><IMG height=3D1 alt=3Dsetstats=20
src=3D"http://visit.geocities.jp/visit.gif?jp1302733397" width=3D1=20
border=3D0></NOSCRIPT><IMG height=3D1 alt=3D1=20
src=3D"http://bc.geocities.yahoo.co.jp/serv?s=3D382116067&amp;t=3D1302733=
397"=20
width=3D1></BODY></HTML>

------=_NextPart_000_001F_01CBFA74.D32BE250
Content-Type: application/octet-stream
Content-Transfer-Encoding: base64
Content-Location: http://visit.geocities.jp/visit.gif?jp1302733397

R0lGODlhAQABAOMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAACH5BAEAAAAALAAAAAABAAEAAAQCEEQAOw==

------=_NextPart_000_001F_01CBFA74.D32BE250
Content-Type: application/octet-stream
Content-Transfer-Encoding: base64
Content-Location: http://bc.geocities.yahoo.co.jp/serv?s=382116067&t=1302733397

R0lGODlhAQABAID/AMDAwAAAACH5BAEAAAAALAAAAAABAAEAAAICRAEAOw==

------=_NextPart_000_001F_01CBFA74.D32BE250
Content-Type: text/css;
	charset="iso-2022-jp"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.geocities.jp/m_hiroi/clisp/clisp_styles.css

BODY {
	BACKGROUND: #e8f0e8; COLOR: black
}
H1 {
	COLOR: green; FONT-STYLE: italic; TEXT-DECORATION: underline
}
H2 {
	COLOR: navy; FONT-STYLE: italic
}
H3 {
	COLOR: maroon
}
H4 {
	COLOR: green
}
P {
	TEXT-INDENT: 1em; LINE-HEIGHT: 1.8
}
CAPTION {
	BACKGROUND: #cccc00
}
TABLE.list {
	BACKGROUND: yellow
}
PRE {
	PADDING-RIGHT: 5px; PADDING-LEFT: 5px; FONT-SIZE: medium; BACKGROUND: =
black; PADDING-BOTTOM: 5px; MARGIN: 1em 2em; COLOR: white; PADDING-TOP: =
5px
}
PRE.fig {
	BORDER-RIGHT: black 1px solid; PADDING-RIGHT: 20px; BORDER-TOP: black =
1px solid; PADDING-LEFT: 20px; BACKGROUND: #e8f0e8; PADDING-BOTTOM: =
20px; BORDER-LEFT: black 1px solid; COLOR: black; LINE-HEIGHT: 1; =
PADDING-TOP: 20px; BORDER-BOTTOM: black 1px solid
}
PRE.list {
	BORDER-RIGHT: blue 1px solid; PADDING-RIGHT: 10px; BORDER-TOP: blue 1px =
solid; PADDING-LEFT: 10px; BACKGROUND: #e0f0ff; PADDING-BOTTOM: 10px; =
BORDER-LEFT: blue 1px solid; COLOR: black; LINE-HEIGHT: 1.1; =
PADDING-TOP: 10px; BORDER-BOTTOM: blue 1px solid
}
PRE.item {
	BORDER-RIGHT: black 1px solid; PADDING-RIGHT: 10px; BORDER-TOP: black =
1px solid; PADDING-LEFT: 10px; BACKGROUND: #e8f0e8; PADDING-BOTTOM: =
10px; BORDER-LEFT: black 1px solid; COLOR: black; LINE-HEIGHT: 1.6; =
PADDING-TOP: 10px; BORDER-BOTTOM: black 1px solid
}
DIV.note {
	FONT-SIZE: small; MARGIN: 1em 3em
}
DIV.center {
	MARGIN: 1em; TEXT-ALIGN: center
}
DIV.question {
	MARGIN: 1em 3em
}
DIV.contents {
	MARGIN-LEFT: 2em; MARGIN-RIGHT: 2em
}
LI {
	LINE-HEIGHT: 1.6
}
BLOCKQUOTE {
	BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; =
BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid
}

------=_NextPart_000_001F_01CBFA74.D32BE250
Content-Type: application/octet-stream
Content-Transfer-Encoding: quoted-printable
Content-Location: http://bc.geocities.yahoo.co.jp/js/gg.js

// JavaScript Document=0A=
=0A=
var day =3D new Date();=0A=
var id =3D ''+day.getFullYear()+day.getDate()+'';=0A=
var ie4 =3D document.all;=0A=
var ie5 =3D document.all && document.getElementById;=0A=
var ns4 =3D document.layers;=0A=
var ns6 =3D document.getElementById && !document.all; =0A=
var auWritten=3Dfalse;=0A=
var mac =3D (navigator.userAgent.indexOf("Mac") >=3D0) ? true : false;=0A=
var url =3D 'http://' + document.domain+location.pathname;=0A=
var ref =3D document.referrer;=0A=
=0A=
=0A=
function noFrameAu()=0A=
{=0A=
	try { if (top.location.hostname){ throw "ok"; } else { throw =
"accesser"; } }=0A=
	catch(er) { if (er=3D=3D"ok") {yfrau =3D =
(top.location.href.indexOf(id)>0) ? true : false;} else {yfrau=3Dtrue;} }=0A=
	return yfrau;=0A=
}=0A=
function writeAu()=0A=
{=0A=
	document.write("<div id=3Dy_gc_div_adcntr =
class=3Dy_gcss_ovrtr_au><iframe =
src=3D\"http://bc.geocities.yahoo.co.jp/bc/gg/i=3D" + jps + "&u=3D" + =
encodeURIComponent(url) + "&ref=3D" + encodeURIComponent(ref) + "\" =
width=3D468 height=3D77 border=3D0 marginwidth=3D0 marginheight=3D0 =
hspace=3D0 vspace=3D0 frameborder=3D0 scrolling=3Dno>no =
iframe</iframe></div>");=0A=
	auPos('y_gc_div_adcntr');=0A=
}=0A=
function auPos(divId)=0A=
{=0A=
	posL =3D Math.floor(findX() / 2) - 234;=0A=
	//posL =3D findX() - 200;=0A=
	if (ns4) {=0A=
	posL=3D'1';=0A=
	document.layers[divId].visibility =3D "show";=0A=
	document.layers[divId].left =3D posL;=0A=
	} else if (ie5 || ns6) {=0A=
	document.getElementById(divId).style.visibility =3D "visible";=0A=
	document.getElementById(divId).style.left =3D posL;=0A=
	} else if (ie4) {=0A=
	document.all[divId].style.visibility =3D "visible";=0A=
	document.all[divId].style.left =3D posL;=0A=
	}=0A=
}=0A=
function isFrameset()=0A=
{=0A=
	var numFr=3D0;=0A=
	numFr=3Dframes.length;=0A=
	numFr=3DnumFr-document.getElementsByTagName("iframe").length;=0A=
	isFr=3D(numFr>0) ? true : false;=0A=
	return isFr; =0A=
}=0A=
function divAu()=0A=
{=0A=
//	if (noFrameAu()) {=0A=
		if (!isFrameset()) {=0A=
			if (inFrame()) {=0A=
				if (checkFrame()) {=0A=
					writeAu();=0A=
					auWritten=3Dtrue;=0A=
					rlPg(true);=0A=
				}=0A=
			} else {=0A=
				writeAu();=0A=
				auWritten=3Dtrue;=0A=
				rlPg(true);=0A=
			}=0A=
		}=0A=
//	}=0A=
}=0A=
function inFrame() {=0A=
	inFr=3D(parent.frames.length !=3D 0) ? true : false;=0A=
	return inFr;=0A=
}=0A=
function findX()=0A=
{=0A=
	var x=3D0;=0A=
	if (self.innerWidth){x =3D self.innerWidth;} // ns=0A=
	else if (document.documentElement && =
document.documentElement.clientHeight){x =3D =
document.documentElement.clientWidth;} // ie6 strict=0A=
	else if (document.body){x =3D document.body.clientWidth;} // other ie=0A=
	return x;=0A=
}=0A=
function findY()=0A=
{=0A=
	var y=3D0;=0A=
	if (self.innerHeight){y=3Dself.innerHeight;} // ns=0A=
	else if (document.documentElement && =
document.documentElement.clientHeight){y =3D =
document.documentElement.clientHeight;} // ie6 strict=0A=
	else if (document.body){y =3D document.body.clientHeight;} // other ie=0A=
	return y;=0A=
}=0A=
function checkFrame() {=0A=
	chFr=3D(findX() > 400 && findY() > 300) ? true : false;=0A=
	return chFr;=0A=
}=0A=
divAu();=0A=
function rlPg(init) {=0A=
 	if (init=3D=3Dtrue) {=0A=
		document.pgW =3D findX();=0A=
		onresize=3DrlPg;=0A=
	} else if (window.innerWidth!=3Ddocument.pgW || =
document.body.offsetWidth!=3Ddocument.pgW) {=0A=
  	auPos('y_gc_div_adcntr');=0A=
  }=0A=
}=0A=
=0A=

------=_NextPart_000_001F_01CBFA74.D32BE250
Content-Type: application/octet-stream
Content-Transfer-Encoding: quoted-printable
Content-Location: http://bc.geocities.yahoo.co.jp/js/geov2.js

var ycsdone;=0A=
function geovisit()=0A=
{=0A=
  var v,w,z;=0A=
  if (ycsdone)=0A=
    return;=0A=
  z=3D"&r=3D"+escape(document.referrer);=0A=
  z=3Dz+"&b=3D"+escape(navigator.appName+" "+navigator.appVersion);=0A=
  w=3DparseFloat(navigator.appVersion);=0A=
  if (w > 2.0) {=0A=
    z=3Dz+"&s=3D"+screen.width+"x"+screen.height;=0A=
    z=3Dz+"&o=3D"+navigator.platform;=0A=
    v=3D"1.2";=0A=
    if (navigator.appName !=3D "Netscape") {=0A=
      z=3Dz+"&c=3D"+screen.colorDepth;=0A=
    } else {=0A=
      z=3Dz+"&c=3D"+screen.pixelDepth=0A=
    }=0A=
    z=3Dz+"&j=3D"+navigator.javaEnabled();=0A=
  } else {=0A=
    v=3D1.0;=0A=
  }=0A=
  z=3Dz+"&v=3D"+v;=0A=
  document.writeln("<IMG BORDER=3D0 =
SRC=3D\"http://visit.geocities.jp/visit.gif?"+z+"\">");=0A=
  ycsdone=3D1;=0A=
}=0A=
=0A=

------=_NextPart_000_001F_01CBFA74.D32BE250--
